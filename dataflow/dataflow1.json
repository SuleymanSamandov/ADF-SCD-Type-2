{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					},
					"name": "Source"
				},
				{
					"dataset": {
						"referenceName": "SqlServerTable2",
						"type": "DatasetReference"
					},
					"name": "Dim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "InsertTarget",
						"type": "DatasetReference"
					},
					"name": "InsertNewRows"
				},
				{
					"dataset": {
						"referenceName": "SqlServerTable4",
						"type": "DatasetReference"
					},
					"name": "InsertChangedUpdateRows"
				},
				{
					"dataset": {
						"referenceName": "SqlServerTable4",
						"type": "DatasetReference"
					},
					"name": "InsertChangedRowsTarget"
				}
			],
			"transformations": [
				{
					"name": "TypeConversionTargetID"
				},
				{
					"name": "FilterOutNull"
				},
				{
					"name": "TypeConversionSourceID"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "AddSCDType2ColumnsForNewRows"
				},
				{
					"name": "select2"
				},
				{
					"name": "RenamingCondition"
				},
				{
					"name": "Look"
				},
				{
					"name": "AddSCDType2ColumnsForUpdate"
				},
				{
					"name": "AddSCDType2ColumnsForChangedNewRows"
				},
				{
					"name": "RenamingChangedData"
				},
				{
					"name": "RenamingUpdateData"
				},
				{
					"name": "Update"
				},
				{
					"name": "RenamingNewRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Source",
				"source(output(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Dim",
				"Dim derive(ID = toInteger(ID)) ~> TypeConversionTargetID",
				"Source filter(!isNull(CATEGORY) && !isNull(PRODUCT)) ~> FilterOutNull",
				"FilterOutNull derive(ID = toInteger(ID),",
				"          CATEGORY = CATEGORY,",
				"          PRODUCT = PRODUCT) ~> TypeConversionSourceID",
				"TypeConversionSourceID, TypeConversionTargetID lookup(TypeConversionSourceID@ID == TypeConversionTargetID@ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"select2 split(isNull(TARGET_ID),",
				"     disjoint: false) ~> split1@(NewRows, CheckForUpdate)",
				"split1@NewRows derive(SOURCE_START_DATE = currentTimestamp(),",
				"          SOURCE_END_DATE = toDate(toString('1900-01-01')),",
				"          SOURCE_FLAG = 1) ~> AddSCDType2ColumnsForNewRows",
				"lookup1 select(mapColumn(",
				"          SOURCE_ID = TypeConversionSourceID@ID,",
				"          SOURCE_CATEGORY = TypeConversionSourceID@CATEGORY,",
				"          SOURCE_PRODUCT = TypeConversionSourceID@PRODUCT,",
				"          TARGET_ID = TypeConversionTargetID@ID,",
				"          TARGET_CATEGORY = Dim@CATEGORY,",
				"          TARGET_PRODUCT = Dim@PRODUCT,",
				"          TARGET_START_DATE = START_DATE,",
				"          TARGET_END_DATE = END_DATE,",
				"          TARGET_FLAG = FLAG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@CheckForUpdate select(mapColumn(",
				"          SOURCE_ID,",
				"          SOURCE_CATEGORY,",
				"          SOURCE_PRODUCT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingCondition",
				"RenamingCondition, TypeConversionTargetID exists(SOURCE_ID==ID &&\r",
				"(\r",
				"    SOURCE_PRODUCT!=PRODUCT\r",
				") &&FLAG==1,",
				"     negate:false,",
				"     broadcast: 'auto')~> Look",
				"Look derive(END_DATE = currentTimestamp(),",
				"          FLAG = 0) ~> AddSCDType2ColumnsForUpdate",
				"Look derive(START_DATE = currentTimestamp(),",
				"          END_DATE = toDate(toString('1900-01-01')),",
				"          FLAG = 1) ~> AddSCDType2ColumnsForChangedNewRows",
				"AddSCDType2ColumnsForChangedNewRows select(mapColumn(",
				"          ID = SOURCE_ID,",
				"          CATEGORY = SOURCE_CATEGORY,",
				"          PRODUCT = SOURCE_PRODUCT,",
				"          START_DATE,",
				"          END_DATE,",
				"          FLAG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingChangedData",
				"AddSCDType2ColumnsForUpdate select(mapColumn(",
				"          ID = SOURCE_ID,",
				"          CATEGORY = SOURCE_CATEGORY,",
				"          PRODUCT = SOURCE_PRODUCT,",
				"          END_DATE,",
				"          FLAG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingUpdateData",
				"RenamingUpdateData alterRow(updateIf(true())) ~> Update",
				"AddSCDType2ColumnsForNewRows select(mapColumn(",
				"          ID = SOURCE_ID,",
				"          CATEGORY = SOURCE_CATEGORY,",
				"          PRODUCT = SOURCE_PRODUCT,",
				"          START_DATE = SOURCE_START_DATE,",
				"          END_DATE = SOURCE_END_DATE,",
				"          FLAG = SOURCE_FLAG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingNewRows",
				"RenamingNewRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          ID,",
				"          CATEGORY,",
				"          PRODUCT,",
				"          START_DATE,",
				"          END_DATE,",
				"          FLAG",
				"     )) ~> InsertNewRows",
				"Update sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     mapColumn(",
				"          ID,",
				"          END_DATE,",
				"          FLAG",
				"     )) ~> InsertChangedUpdateRows",
				"RenamingChangedData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 3,",
				"     mapColumn(",
				"          ID,",
				"          CATEGORY,",
				"          PRODUCT,",
				"          START_DATE,",
				"          END_DATE,",
				"          FLAG",
				"     )) ~> InsertChangedRowsTarget"
			]
		}
	}
}