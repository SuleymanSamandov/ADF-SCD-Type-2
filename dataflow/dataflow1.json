{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source",
						"type": "DatasetReference"
					},
					"name": "Source"
				},
				{
					"dataset": {
						"referenceName": "Target",
						"type": "DatasetReference"
					},
					"name": "Target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SqlServerTable1",
						"type": "DatasetReference"
					},
					"name": "InsertNewRows"
				},
				{
					"dataset": {
						"referenceName": "Target",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Target",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "TypeConversionTargetID"
				},
				{
					"name": "FilterOutNull"
				},
				{
					"name": "TypeConversionSourceID"
				},
				{
					"name": "Lookup"
				},
				{
					"name": "SelectSourceName"
				},
				{
					"name": "NewRow"
				},
				{
					"name": "AddNewRow"
				},
				{
					"name": "NormSourceName"
				},
				{
					"name": "NormNameChechkForUpdate"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Source",
				"source(output(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Target",
				"Target derive(ID = ID,",
				"          CATEGORY = CATEGORY,",
				"          PRODUCT = PRODUCT,",
				"          START_DATE = START_DATE,",
				"          END_DATE = END_DATE,",
				"          FLAG = FLAG) ~> TypeConversionTargetID",
				"Source filter(!isNull(CATEGORY) && !isNull(PRODUCT)) ~> FilterOutNull",
				"FilterOutNull derive(ID = ID,",
				"          CATEGORY = CATEGORY,",
				"          PRODUCT = PRODUCT) ~> TypeConversionSourceID",
				"TypeConversionSourceID, TypeConversionTargetID lookup(TypeConversionSourceID@ID == TypeConversionTargetID@ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> Lookup",
				"Lookup select(mapColumn(",
				"          ID_SOURCE = TypeConversionSourceID@ID,",
				"          CATEGORY_SOURCE = TypeConversionSourceID@CATEGORY,",
				"          PRODUCT_SOURCE = TypeConversionSourceID@PRODUCT,",
				"          ID_TARGET = TypeConversionTargetID@ID,",
				"          CATEGORY_TARGET = TypeConversionTargetID@CATEGORY,",
				"          PRODUCT_TARGET = TypeConversionTargetID@PRODUCT",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSourceName",
				"SelectSourceName split(!isNull(ID_SOURCE) && isNull(ID_TARGET),",
				"     disjoint: false) ~> NewRow@(NewData, CheckForUpdate)",
				"NewRow@NewData derive(START_DATE_SOURCE = currentTimestamp(),",
				"          END_DATE_SOURCE = toDate(toString('1900-01-01')),",
				"          FLAG_SOURCE = 1) ~> AddNewRow",
				"AddNewRow select(mapColumn(",
				"          ID = ID_SOURCE,",
				"          CATEGORY = CATEGORY_SOURCE,",
				"          PRODUCT = PRODUCT_SOURCE,",
				"          START_DATE = START_DATE_SOURCE,",
				"          END_DATE = END_DATE_SOURCE,",
				"          FLAG = FLAG_SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NormSourceName",
				"NewRow@CheckForUpdate select(mapColumn(",
				"          ID = ID_SOURCE,",
				"          CATEGORY = CATEGORY_SOURCE,",
				"          PRODUCT = PRODUCT_SOURCE",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NormNameChechkForUpdate",
				"NormNameChechkForUpdate, TypeConversionTargetID exists(NormNameChechkForUpdate@ID==TypeConversionTargetID@ID &&\r",
				"(\r",
				"    NormNameChechkForUpdate@CATEGORY != TypeConversionTargetID@CATEGORY ||\r",
				"    NormNameChechkForUpdate@PRODUCT  != TypeConversionTargetID@PRODUCT && FLAG==1\r",
				"),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(START_DATE = currentTimestamp(),",
				"          END_DATE = toDate(toString('1900-01-01')),",
				"          FLAG = 1) ~> derivedColumn1",
				"exists1 derive(END_DATE = toDate(toString('1900-01-01')),",
				"          FLAG = 0) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          ID,",
				"          END_DATE,",
				"          FLAG",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 alterRow(updateIf(true())) ~> alterRow1",
				"NormSourceName sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     mapColumn(",
				"          ID,",
				"          CATEGORY,",
				"          PRODUCT,",
				"          START_DATE,",
				"          END_DATE,",
				"          FLAG",
				"     )) ~> InsertNewRows",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          SID as integer,",
				"          ID as integer,",
				"          CATEGORY as string,",
				"          PRODUCT as string,",
				"          START_DATE as timestamp,",
				"          END_DATE as timestamp,",
				"          FLAG as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ID'],",
				"     format: 'table',",
				"     mapColumn(",
				"          ID,",
				"          END_DATE,",
				"          FLAG",
				"     )) ~> sink2"
			]
		}
	}
}